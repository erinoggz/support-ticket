import express, { Application } from 'express';
import config from './app/config/config';
import Routes from './app/route';
import cors from 'cors';
import mongoose from 'mongoose';
import response from './app/lib/response';
import jwtMiddleware from './app/middleware/jwt.middleware';
import passport from 'passport';

import { LoggerService } from './app/service/logger.service';
import StatusCodes from './app/lib/response/status-codes';
import di from './app/config/di';

const logger: LoggerService = di.get('logger');

class Server {
  /**
    The Express application instance.
    @readonly
    @type {Application}
  */
  private app: Application;
  private serverInstance: any;
  constructor() {
    this.app = express();
  }

  /**
    Establishes the connection to the MongoDB database.
    @private
    * @return {void}
  */
  private mongooseConnection(): void {
    mongoose.set('strictQuery', false);
    mongoose
      .connect(config.mongo.uri)
      .then(() => logger.log('Database Connected'))
      .catch((err) => {
        logger.error(err);
      });

    mongoose.connection.on('error', (err) => {
      logger.error(`DB connection error: ${err.message}`);
    });
  }

  /**
    Configures the server by establishing the database connection,
    setting up middleware, and mounting routes.
     * @return {void}
  */
  public configuration(): void {
    this.mongooseConnection();
    this.app.use(response);
    this.app.use(cors());
    this.app.use(express.json());

    // Initialize passport middleware
    this.app.use(passport.initialize());
    jwtMiddleware(passport);

    this.app.get('/', (req, res) => {
      res.status(StatusCodes.OK).json('starting...');
    });

    // Mount routes
    Routes(this.app);
  }

  /**
    Starts the server by listening on the configured port and
    executing the configuration steps
    * @return {Promise<void>}
  */
  public async start(): Promise<void> {
    const PORT = config.web.port;
    this.configuration();
    this.serverInstance = this.app.listen(PORT, () => {
      logger.log(`Server is listening on port ${PORT}.`);
    });
  }

  /**
    Stops the server by closing the server instance
    * @return {void}
  */
  public stop(): void {
    if (this.serverInstance) {
      this.serverInstance.close();
      logger.log('Server has been stopped.');
    }
  }

  /**
   * Returns the underlying HTTP server instance.
   * @returns {http.Server} The HTTP server instance.
   */
  public getServerInstance(): any {
    return this.app;
  }
}
const server = new Server();
server.start();

/**
  Handles the SIGINT signal, typically generated by pressing Ctrl+C to terminate the process.
  Performs graceful shutdown procedures.
  @param {Function} callback - The callback function to be executed when the SIGINT signal is received.
  */

process.on('SIGINT', function () {
  logger.log('\nGracefully shutting down from SIGINT (Ctrl-C)');
  // some other closing procedures go here
  process.exit(1);
});
